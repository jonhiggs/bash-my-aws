#!/bin/bash
source $(dirname ${BASH_SOURCE[0]})/shared-functions

# instance-functions.sh
#
# List, run, start, stop and ssh to Amazon AWS EC2 instances

# Fields to include when listing EC2 Instances
#  Fields to include when listing EBS volumes

instances() {
  # query
  instance_ids=$(__read_inputs $@)
  [[ -z $instance_ids ]] || instance_ids="--instance-ids ${instance_ids}"

  if [[ ! -z ${INSTANCE_FILTERS} ]]; then
    filters="--filters ${INSTANCE_FILTERS}"
  else
    filters=""
  fi

  aws ec2 describe-instances $filters $instance_ids \
    --query "Reservations[].Instances[].${INSTANCE_OUTPUT}" \
    --output text
}

instances_tagged() {
  # query
  if [ -z "$1" ] ; then echo "Usage: $FUNCNAME tag_key [tag_value]"; return 1; fi
  local tag_name=$1
  local tag_value=${2:-"*"}
  INSTANCE_FILTERS="Name=tag:${tag_name},Values=${tag_value}" instances
}

instance_tag() {
  # detail
  instance_ids=$(__read_inputs $@)

  # FIXME: The code and the output are all too hard to read.
  INSTANCE_OUTPUT="[ InstanceId Tags ]" \
    instances $instance_ids             |
    tr '\t' ","                         |
    sed s/^/Name=/g                     |
    sed s/,/,Values=/g                  |
    sed -E 's/Name=(i-[0-9a-f]{8})/\1/' |
    tr "\n" " "
  echo

  # get instance ids
  # seperate name and values with comma
  # label the names with Name
  # lavel the values with Value
  # strip the name from the instance id.
  # join it all up.
}

instance_iam_profile() {
  # detail
  instance_ids=$(__read_inputs $@)
  INSTANCE_OUTPUT="[ InstanceId IamInstanceProfile.Id ]" \
    instances $instance_ids
}

instance_console_output() {
  # detail
  for instance_id in $(__read_inputs $@); do
    aws ec2 get-console-output    \
      --instance-id $instance_id  \
      --query Output              \
      --output text
  done
}

instance_userdata() {
  # detail
  for instance_id in $(__read_inputs $@); do
    aws ec2 describe-instance-attribute         \
      --attribute userData                      \
      --instance-id $instance_id                \
      --query UserData                          \
      --output text                             |
        base64 --decode
  done
}

instance_types() {
  # query + detail
  INSTANCE_OUTPUT="[ InstanceId InstanceType ]" \
    instances $(__read_inputs $@)               |
      awk '{ print $2 }'                        |
      sort | uniq -c
}

instance_volumes() {
  # detail
  # TODO: fix the output.
  INSTANCE_OUTPUT="BlockDeviceMappings[].Ebs[].VolumeId" \
    instances $(__read_inputs $@)
}

instance_asg() {
  # detail
  INSTANCE_OUTPUT="[ InstanceId Tags ]" \
    instances $(__read_inputs $@)       |
    grep -E -e "i-[0-9a-f]{8}" -e "aws:autoscaling:groupName"  |
    sed -E 's/aws:autoscaling:groupName//g' |
    sed -E 's/(i-[0-9a-f]{8})/\1:/'     |
    sed -E 's/([^\:])$/\1;/g'           |
    tr -d '\n'                          |
    tr ':' ' '                          |
    tr ';' '\n'
}

#instance_elb() {
#}

#instance_launch_config() {
#}

instance_type() {
  # detail
  INSTANCE_OUTPUT="[ InstanceId InstanceType ]" \
    instances $(__read_inputs $@)
}

instance_stack() {
  # detail
  INSTANCE_OUTPUT="[ InstanceId Tags ]" \
    instances $(__read_inputs $@)       |
    grep -E -e "i-[0-9a-f]{8}" -e "aws:cloudformation:stack-id"  |
    cut -d: -f8                         |
    cut -d/ -f2                         |
    sed -E 's/(i-[0-9a-f]{8})/\1:/'     |
    sed -E 's/([^\:])$/\1;/g'           |
    tr -d '\n'                          |
    tr ':' ' '                          |
    tr ';' '\n'
}

#instance_role() {
#  instance_ids=$(__read_inputs $@)
#  instance_iam_profile $instance_ids |
#    INSTANCE_OUTPUT="[ InstanceId ] instances $instance_ids
#  
#  aws ec2 describe-instances --instance-id
#  $instance_id --query "Reservations[].Instances[].IamInstanceProfile.Id"
#  --output text)
#  aws iam list-instance-profiles --query
#  "InstanceProfiles[?InstanceProfileId==\`$iam_instance_profile_id\`].Roles[].RoleName"
#  --output text
#}


instances_without_tag() {
  if [ -z "$1" ] ; then echo "Usage: $FUNCNAME tag_key [tag_value]"; return 1; fi
  local tag_key=$1
  local tag_value=$2
  if [ -z "$tag_value" ]; then
    aws ec2 describe-instances --output text --query "Reservations[].Instances[?contains(Tags[].Key[], \`$tag_key\`) != \`true\`][].${INSTANCE_OUTPUT}"
  else
    aws ec2 describe-instances --output text --query "Reservations[].Instances[?contains(Tags[?Key==\`$tag_key\`].Value[], \`$tag_value\`) != \`true\`][].${INSTANCE_OUTPUT}"
  fi
}


instance_ssh() {
  if [ -z "$1" ] ; then echo "Usage: $FUNCNAME instance-id [user]"; return 1; fi
  local instance_id=$1
  local user=$2

  local instance_details=$(instance_ssh_details $instance_id)
  local keyname=$(echo "$instance_details" | awk '{print $1}');
  local ip=$(echo "$instance_details" | awk '{print $2}');
  local instance_name=$(echo "$instance_details" | awk '{print $3}');
  local instance_default_user=$(echo "$instance_details" | awk '{print $4}');

  local USERNAME=${user:-${instance_default_user:-${AWS_DEFAULT_USER:-root}}}
  echo "Connecting to $instance_id $instance_name"
  ssh \
    -t \
    -i ~/.ssh/$keyname \
    -o LogLevel=quiet \
    -o StrictHostKeyChecking=no \
    -o UserKnownHostsFile=/dev/null \
    -l $USERNAME \
    $ip
}

instance_ssh_details() {
  if [ -z "$1" ] ; then echo "Usage: $FUNCNAME stack [template]"; return 1; fi
  local instance_id=$1
  aws ec2 describe-instances --filters Name=instance-id,Values=$instance_id --query "
    Reservations[].Instances[0].[
      KeyName,
      PrivateIpAddress,
      join(\` \`, [Tags[?Key==\`Name\`].Value][] || [\`not-named\`]),
      join(\` \`, [Tags[?Key==\`default-user\`].Value][] || [\`\`])
    ]" --output text
}

instance_start() {
  if [ -z "$1" ] ; then echo "Usage: $FUNCNAME instance-id"; return 1; fi
  aws ec2 start-instances --instance-id $1
}

instance_stop() {
  if [ -z "$1" ] ; then echo "Usage: $FUNCNAME instance-id"; return 1; fi
  aws ec2 stop-instances --instance-id $1
}

instance_terminate() {
  aws ec2 modify-instance-attribute --attribute disableApiTermination --value false --instance-id $1
  aws ec2 terminate-instances --instance-id $1
}

